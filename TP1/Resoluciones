
-- Consulta
-- a++, cómo se puede expresar en la gramática dada?


Transformamos la gramática para expresiones enteras 


intexp ::= intexp '+' intterm 
         | intexp '-' intterm 
         | intterm

intterm ::= intterm '*' intfactor 
          | intterm '/' intfactor
          | intfactor

intfactor ::= '(' intexp ')'
            | integer
            | identifier ( '++' | e)
            | '-' intfactor

Para expresiones booleanas 

boolexp ::= boolexp '&&' boolterm
          | boolexp '||' boolterm
          | boolterm
    
boolterm ::= 'true'
            |'false'
            | intexp '==' intexp
            | intexp '!=' intexp
            | intexp '<' intexp
            | intexp '>' intexp
            | '!' boolterms

comm ::= comm ';' commterm

commterm ::= 'skip'
           | identifier '=' intexp
           | 'if' boolexp 'then' comm 'else' comm
           | 'repeat' comm 'until' boolexp
           | 'case's '{' casebranches '}' 

casebranches ::= boolexp ':' '{' comm '}' casebranches
               | e


-- Ejercicio 4
                 <e0, O> =>exp <n0, O>
________________________________________________(VarInc)
      <e0++, O> =>exp <n0+1, [O | n0 : n0 +1]>